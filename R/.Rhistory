n     <- length(x)
z     <- sort(scale(x))
index <- if (min) 1:2 else n:(n-1)
if (is.null(index)) stop ('Either "min" or "max" must be positive')
statistic        <- sqa(z[-index])/sqa(z)
names(statistic) <- 'U'
swt <- shapiro.test(z[-(1:2)])
if (swt$p.value<alpha) warning("Shapiro wilk test: p.value = ", sprintf("%.6f", swt$p.value))
k <- rep(NA, B)
for (i in 1:B) {
z0   <- sort(rnorm(n))
k[i] <- sqa(z0[-index])/sqa(z0)
}
htest <- list(statistic   = statistic,
p.value     = sum(k<statistic)/B,
method      = "Grubbs/Beck test",
alternative = ifelse(minimum, 'x(1) or x(2) is an outlier', 'x(n-1) or x(n) is an outlier'),
data.name   = DNAME,
statistic0  = k)
class(htest) <- 'htest'
htest
}
dhp_test <- function(x, B=2000, alpha=0.05, ...) { # outliers::grubbs.test(x, type=11)
DNAME <- deparse(substitute(x))
args  <- list(...)
statistic        <- diff(range(x))/sd(x)
names(statistic) <- 'G'
swt <- shapiro.test(x[-c(which.min(x), which.max(x))])
if (swt$p.value<alpha) warning("Shapiro wilk test: p.value = ", sprintf("%.6f", swt$p.value))
k <- rep(NA, B)
for (i in 1:B) {
z0   <- rnorm(length(x))
k[i] <- diff(range(z0))/sd(z0)
}
htest <- list(statistic   = statistic,
p.value     = 2*sum(k>statistic)/B,
method      = "David-Hartley-Pearson test",
alternative = 'x(1) or x(n) are outliers',
data.name   = DNAME,
statistic0  = k)
class(htest) <- 'htest'
htest
}
dixon_test <- function(x, B=2000, min=FALSE, outlier=c(1,1), alpha=0.05, ...) { # outliers::grubbs.test(x, type=11)
DNAME <- deparse(substitute(x))
args  <- list(...)
statistic        <- diff(range(x))/sd(x)
names(statistic) <- 'G'
swt <- shapiro.test(x[-c(which.min(x), which.max(x))])
if (swt$p.value<alpha) warning("Shapiro wilk test: p.value = ", sprintf("%.6f", swt$p.value))
k <- rep(NA, B)
for (i in 1:B) {
z0   <- rnorm(length(x))
k[i] <- diff(range(z0))/sd(z0)
}
htest <- list(statistic   = statistic,
p.value     = sum(k>statistic)/B,
method      = "David-Hartley-Pearson test",
alternative = 'x(1) or x(n) are outliers',
data.name   = DNAME,
statistic0  = k)
class(htest) <- 'htest'
htest
}
outlier_test <- function(x, type="walsh_test", B=2000, alpha=0.05,  min=0, max=1, plot=FALSE, ...) {
if (is.matrix(x))
apply(x, 2, outlier_test, type=type, B=B, alpha=alpha, min=min, max=max,...)
else if (is.data.frame(x))
sapply(x, outlier_test, type=type, B=B, alpha=alpha,  min=min, max=max, ...)
else {
type  <- if(is.character(type)) type else deparse(substitute(type))
fun   <- getFun(type, c('beck_test', 'dhp_test', 'grubbs_test'))
tst   <- fun$fun(x, B=B, alpha=alpha,  min=min, max=max, ...)
if (plot) {
DNAME <- deparse(substitute(x))
hist(tst$statistic0, main=fun$name, xlab='statistic (black: simulated, red: sample)',
sub=paste('alternative hypothesis:', tst$alternative), xlim=range(c(tst$statistic0, tst$statistic)))
rug(tst$statistic0)
abline(v=tst$statistic, col="red")
}
}
tst
}
library("MASS")
x <- rnorm(100)
x3 <- c(rnorm(99), 3)
x6 <- c(rnorm(99), 6)
outlyingness(x, stahel_donoho)
outlyingness(x, "stahel_donoho", plot=TRUE)
outlyingness(x, "s", plot=TRUE)
outlyingness(x3, normalize)
outlyingness(x6, boxplot)
outlier_test(-x6, 'grubbs', plot=TRUE)
outlier_test(-x6, 'grubbs', plot=TRUE, min=TRUE)
grubbs.test(-x6)
browseURL("https://shinyapps.wiwi.hu-berlin.de/examples/?P=data/cluster/k_means/kmeansstd.R")
test <- function(...) { }
test()
test(1,2,3)
test <- function(...) { invisible(NULL) }
test(1,2,3)
browseURL("https://shinyapps.wiwi.hu-berlin.de/examples/?P=data/cart/1R/RCART3.R")
dev.off <- function(...) {str(list(...))}
dev.off()
graphics::dev.off()
grDevices::dev.off()
normalize <- function (x,  center=mean, scale=sd, ...) {
c <- match.fun(center)(x,)
s <- match.fun(scale)(x, ...)
abs(x-c)/s
}
boxplot_scale <- function (x, ..., center=median, scale=IQR) { normalize(x, center, scale, ...) }
stahel_donoho_scale <- function (x, ..., center=median, scale=mad) { normalize(x, center, scale, ...) }
normalize <- function (x,  center=mean, scale=sd, ...) {
c <- match.fun(center)(x,)
s <- match.fun(scale)(x, ...)
abs(x-c)/s
}
boxplot_scale <- function (x, ...) { normalize(x, center=median, scale=IQR, ...) }
stahel_donoho_scale <- function (x, ...) { normalize(x, center=median, scale=mad, ...) }
stahel_donoho_scale(rnorm(100))
library("outliers")
library("robustbase")
install.packages('robustbase')
library("robustbase")
?adjOutlyingness
test <- function(x, ..., b=1) {str(x); str(b); str(list(...))}
test(1, b=7)
test(1)
test2 <- function(x) {str(x) }
test <- function(x, ..., b=1) {test2(x); test2(b); test2(list(...))}
test(1, b=7)
test(1)
test(1, b=7, c=1)
test(1, b=7, c=1m b=8)
test(1, b=7, c=1, b=8)
test(1, c=1, b=8)
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
c <- match.fun(center)(x,)
s <- match.fun(scale)(x, ...)
out <- abs(x-c)/s
attr(out, 'outlier') <- (out>cutoff)
out
}
boxplot_scale <- function (x, cutoff=2, ...) { normalize(x, center=median, scale=IQR, cutoff=cutoff, ...) }
stahel_donoho_scale <- function (x, ...) { normalize(x, center=median, scale=mad, ...) }
getFun <- function(type, funlist=NULL) {
match <- pmatch(type, funlist)
if (is.na(match)) return(list(fun=match.fun(type), name=type))
list(fun=match.fun(funlist[match]), name=funlist[match])
}
outlyingness <- function(x, type="boxplot", plot=FALSE, ...) {
if (is.matrix(x))
ret <- apply(x, 2, outlyingness, type=type, ...)
else if (is.data.frame(x))
ret <- sapply(x, outlyingness, type=type, ...)
else {
type  <- if(is.character(type)) type else deparse(substitute(type))
fun   <- getFun(type, c('boxplot_scale', 'normalize', 'stahel_donoho_scale'))
ret   <- fun$fun(x, ...)
if (plot) {
DNAME <- deparse(substitute(x))
hist(ret, main=fun$name, xlab=DNAME)
rug(ret)
}
}
ret
}
library("MASS")
x <- rnorm(100)
x3 <- c(rnorm(99), 3)
x6 <- c(rnorm(99), 6)
outlyingness(x, stahel_donoho_scale)
outlyingness(x, "stahel_donoho", plot=TRUE)
outlyingness(x, "s", plot=TRUE)
outlyingness(x3, normalize)
outlyingness(x6, boxplot_scale)
DF <- data.frame(a = 1:3, b = letters[10:12],
c = seq(as.Date("2004-01-01"), by = "week", len = 3),
stringsAsFactors = TRUE)
data.matrix(DF[1:2])
data.matrix(DF)
DF
?`%*%
`
?`%*%`
matrix(runif(9), ncol=3)%*%runif(3)
matrix(runif(12), ncol=3)%*%runif(4)
matrix(runif(12), ncol=3)%*%runif(3)
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
ncenter <- match.fun(center)
nscale  <- match.fun(scale)
if (is.data.frame(x)) x <- as.matrix(x)
if (is.matrix(x)) {
out <- rep(0, )
for (i in 1:(mult*ndir)) {
alpha <- rnorm(ncol(x))
alpha <- alpha/sqrt(sum(alpha^2))
c <- ncenter(x%*%alpha,)
s <- nscale(x%*%alpha, ...)
t <- abs(x-c)/s
out <- ifelse(t>out, t, out)
}
} else {
c   <- ncenter(x%*%alpha,)
s   <- nscale(x%*%alpha, ...)
out <- abs(x-ncenter(x))/nscale(x, ...)
}
out <- abs(x-c)/s
attr(out, 'outlier') <- (out>cutoff)
out
}
normalize(rnorm(x))
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
ncenter <- match.fun(center)
nscale  <- match.fun(scale)
browser()
if (is.data.frame(x)) x <- as.matrix(x)
if (is.matrix(x)) {
out <- rep(0, )
for (i in 1:(mult*ndir)) {
alpha <- rnorm(ncol(x))
alpha <- alpha/sqrt(sum(alpha^2))
c <- ncenter(x%*%alpha,)
s <- nscale(x%*%alpha, ...)
t <- abs(x-c)/s
out <- ifelse(t>out, t, out)
}
} else {
c   <- ncenter(x%*%alpha,)
s   <- nscale(x%*%alpha, ...)
out <- abs(x-ncenter(x))/nscale(x, ...)
}
out <- abs(x-c)/s
attr(out, 'outlier') <- (out>cutoff)
out
}
normalize(rnorm(100))
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
ncenter <- match.fun(center)
nscale  <- match.fun(scale)
browser()
if (is.data.frame(x)) x <- as.matrix(x)
if (is.matrix(x)) {
out <- rep(0, )
for (i in 1:(mult*ndir)) {
alpha <- rnorm(ncol(x))
alpha <- alpha/sqrt(sum(alpha^2))
c <- ncenter(x%*%alpha)
s <- nscale(x%*%alpha, ...)
t <- abs(x-c)/s
out <- ifelse(t>out, t, out)
}
} else {
c   <- ncenter(x)
s   <- nscale(x, ...)
out <- abs(x-ncenter(x))/nscale(x, ...)
}
out <- abs(x-c)/s
attr(out, 'outlier') <- (out>cutoff)
out
}
normalize(rnorm(100))
cbind(x, out)
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
ncenter <- match.fun(center)
nscale  <- match.fun(scale)
browser()
if (is.data.frame(x)) x <- as.matrix(x)
if (is.matrix(x)) {
out <- rep(0, nrow(x))
for (i in 1:(mult*ndir)) {
alpha <- rnorm(ncol(x))
alpha <- alpha/sqrt(sum(alpha^2))
c <- ncenter(x%*%alpha)
s <- nscale(x%*%alpha, ...)
t <- abs(x-c)/s
out <- ifelse(t>out, t, out)
}
} else {
c   <- ncenter(x)
s   <- nscale(x, ...)
out <- abs(x-ncenter(x))/nscale(x, ...)
}
attr(out, 'outlier') <- (out>cutoff)
out
}
normalize(rnorm(100))
normalize(matrix(rnorm(100), ncol=4))
alpha
alpha
normalize(matrix(rnorm(100), ncol=4))
out
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
ncenter <- match.fun(center)
nscale  <- match.fun(scale)
if (is.data.frame(x)) x <- as.matrix(x)
if (is.matrix(x)) {
out <- rep(0, nrow(x))
for (i in 1:(mult*ndir)) {
alpha <- rnorm(ncol(x))
xa    <- x%*%alpha/sqrt(sum(alpha^2))
c <- ncenter(xa)
s <- nscale(xa, ...)
t <- abs(xa-c)/s
out <- ifelse(t>out, t, out)
}
} else {
c   <- ncenter(x)
s   <- nscale(x, ...)
out <- abs(x-ncenter(x))/nscale(x, ...)
}
attr(out, 'outlier') <- (out>cutoff)
out
}
normalize(matrix(rnorm(100), ncol=4))
hist(normalize(matrix(rnorm(100), ncol=4)))
hist(normalize(rnorm(100))
)
hist(normalize(matrix(rnorm(100), ncol=2)))
hist(normalize(matrix(rnorm(300), ncol=3)))
hist(normalize(matrix(rnorm(400), ncol=4)))
hist(normalize(matrix(rnorm(400), ncol=4)))
hist(normalize(matrix(rnorm(400), ncol=4)))
hist(normalize(matrix(rnorm(400), ncol=4)))
normalize(matrix(rnorm(400), ncol=4))
boxplot_scale(matrix(rnorm(400), ncol=4))
qnorm(0.75)
qnorm(0.75)+1.349
qnorm(0.75)+1.5*(qnorm(0.75)-qnorm(0.25))
qnorm(0.25)-1.5*(qnorm(0.75)-qnorm(0.25))
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
ncenter <- match.fun(center)
nscale  <- match.fun(scale)
if (is.data.frame(x)) x <- as.matrix(x)
if (is.matrix(x)) {
out <- rep(0, nrow(x))
for (i in 1:(mult*ndir)) {
alpha <- rnorm(ncol(x))
xa    <- x%*%alpha/sqrt(sum(alpha^2))
c <- ncenter(xa)
s <- nscale(xa, ...)
t <- abs(xa-c)/s
out <- ifelse(t>out, t, out)
}
} else {
c   <- ncenter(x)
s   <- nscale(x, ...)
out <- abs(x-ncenter(x))/nscale(x, ...)
}
attr(out, 'outlier') <- (out>cutoff)
out
}
boxplot_scale <- function (x, cutoff=2.7, ...) { normalize(x, center=median, scale=IQR, cutoff=cutoff, ...) }
stahel_donoho_scale <- function (x, ...) { normalize(x, center=median, scale=mad, ...) }
qnorm(0.75)+1.5*(qnorm(0.75)-qnorm(0.25))
?IQR
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
ncenter <- match.fun(center)
nscale  <- match.fun(scale)
na      <- FALSE
if (is.data.frame(x)) x <- as.matrix(x)
if (is.matrix(x)) {
out <- rep(0, nrow(x))
for (i in 1:(mult*ndir)) {
alpha <- rnorm(ncol(x))
xa <- x%*%alpha/sqrt(sum(alpha^2))
c  <- ncenter(xa)
s  <- nscale(xa, ...)
t  <- abs(xa-c)/s
na <- na | any(is.na(t))
out <- ifelse(t>out, t, out)
}
} else {
c   <- ncenter(x)
s   <- nscale(x, ...)
out <- abs(x-c)/s
na  <- any(is.na(out))
}
if (cutoff<0) {
attr(out, 'outlier') <- (out>quantile(out, 0.75)-cutoff*IQR(out))
} else {
attr(out, 'outlier') <- (out>cutoff)
}
if (na) warning('NAs generated')
out
}
boxplot_scale(matrix(rnorm(400), ncol=4))
normalize <- function (x,  center=mean, scale=sd, cutoff=Inf, ndir=250, mult=1, ...) {
ncenter <- match.fun(center)
nscale  <- match.fun(scale)
na      <- FALSE
if (is.data.frame(x)) x <- as.matrix(x)
if (is.matrix(x)) {
out <- rep(0, nrow(x))
for (i in 1:(mult*ndir)) {
alpha <- rnorm(ncol(x))
xa <- x%*%alpha/sqrt(sum(alpha^2))
c  <- ncenter(xa)
s  <- nscale(xa, ...)
t  <- abs(xa-c)/s
na <- na | any(is.na(t))
out <- ifelse(t>out, t, out)
}
attr(out, 'ndir') <- mult*ndir
} else {
c   <- ncenter(x)
s   <- nscale(x, ...)
out <- abs(x-c)/s
attr(out, 'ndir') <- 1
na  <- any(is.na(out))
}
if (cutoff<0) {
attr(out, 'outlier') <- (out>quantile(out, 0.75)-cutoff*IQR(out))
} else {
attr(out, 'outlier') <- (out>cutoff)
}
if (na) warning('NAs generated')
out
}
boxplot_scale <- function (x, cutoff=-1.5, ...) { normalize(x, center=median, scale=IQR, cutoff=cutoff, ...) }
stahel_donoho_scale <- function (x, ...) { normalize(x, center=median, scale=mad, ...) }
boxplot_scale(matrix(rnorm(400), ncol=4))
setwd("~/syncthing/ingress/findWeb/vignettes")
setwd("../R")
library("devtools")
build_vignettes()
rm(list=ls())
library("devtools")
build_vignettes()
library("magrittr")
build_vignettes()
install()
build_vignettes()
library("findWeb")
fishbone(8) %>% web(xy) %>% optimize() %>% linkPlan1() %>% plot(blue=FALSE)
fishbone(8) %>% web(xy) %>% optimizeWeb() %>% linkPlan1() %>% plot(blue=FALSE)
optimize
fishbone(8) %>% web(xy) %>% optimizeWeb() %>% linkPlan1() %>% plot(blue=FALSE)
fishbone(8) %>% web(xy) %>% optimizeWeb() %>% linkPlan1() %>% plot(blue=FALSE)
fishbone(8) %>% web(xy) %>% optimizeWeb() %>% linkPlan1() %>% plot(blue=FALSE)
fishbone(8) %>% web(xy) %>% optimizeWeb() %>% linkPlan1() %>% plot(blue=FALSE)
fishbone(8) %>% web(xy) %>% optimizeWeb() %>% linkPlan1() %>% plot(blue=FALSE)
build_vignettes()
?dist
g2
dist(g2$vertices)
dv<-dist(g2$vertices)
dv[1,]
dv[1]
dv[2]
as.matrix(dv)[1,]
d1<1/as.matrix(dv)[1,]
d1<-1/as.matrix(dv)[1,]
d1
d1<-1/(1+as.matrix(dv)[1,])
d1
d1<-1/as.matrix(dv)[1,]
d1
p <- d1[-1]/sum(d1[-1])
p
range(p)
dv<-dist(g2$vertices)^2
d1<-1/as.matrix(dv)[1,]
d1
p <- d1[-1]/sum(d1[-1])
range(p)
?dist
dv<-dist(g2$vertices, "manhattan")
d1<-1/as.matrix(dv)[1,]
p <- d1[-1]/sum(d1[-1])
range(p)
dv<-dist(g2$vertices, "maximum")
d1<-1/as.matrix(dv)[1,]
p <- d1[-1]/sum(d1[-1])
range(p)
1/42
hist(p)
abline(v=1/42)
?sample
build_vignettes()
1/42
p
d1<-1/as.matrix(dv)
d1
d1-colSums(d1)
?diag
diag(d1)<-0
d1
d2<-scale(d1, center=colSums(d1), scale=FALSE)
d2
d2[,1]
d2<-sweep(d1, 2, colSums(d1), '/')
range(d2)
d2[,1]
range(d2[,1])
range(d2[,2])
apply(d2, 2, max)
range(d2[,18])
rd2[,18]
d2[,18]
max(d2[,18])
sort(d2[,18])
d1[15,18]
mean(d1)
d1
mean(dv)
hist(dv)
boxplot(dv)
min(dv)
check()
check()
